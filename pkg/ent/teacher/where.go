// Code generated by ent, DO NOT EDIT.

package teacher

import (
	"go_test/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TeacherID applies equality check predicate on the "teacher_id" field. It's identical to TeacherIDEQ.
func TeacherID(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// TeacherName applies equality check predicate on the "teacher_name" field. It's identical to TeacherNameEQ.
func TeacherName(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherName), v))
	})
}

// TeacherIDEQ applies the EQ predicate on the "teacher_id" field.
func TeacherIDEQ(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDNEQ applies the NEQ predicate on the "teacher_id" field.
func TeacherIDNEQ(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherID), v))
	})
}

// TeacherIDIn applies the In predicate on the "teacher_id" field.
func TeacherIDIn(vs ...int32) predicate.Teacher {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDNotIn applies the NotIn predicate on the "teacher_id" field.
func TeacherIDNotIn(vs ...int32) predicate.Teacher {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeacherID), v...))
	})
}

// TeacherIDGT applies the GT predicate on the "teacher_id" field.
func TeacherIDGT(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeacherID), v))
	})
}

// TeacherIDGTE applies the GTE predicate on the "teacher_id" field.
func TeacherIDGTE(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeacherID), v))
	})
}

// TeacherIDLT applies the LT predicate on the "teacher_id" field.
func TeacherIDLT(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeacherID), v))
	})
}

// TeacherIDLTE applies the LTE predicate on the "teacher_id" field.
func TeacherIDLTE(v int32) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeacherID), v))
	})
}

// TeacherNameEQ applies the EQ predicate on the "teacher_name" field.
func TeacherNameEQ(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTeacherName), v))
	})
}

// TeacherNameNEQ applies the NEQ predicate on the "teacher_name" field.
func TeacherNameNEQ(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTeacherName), v))
	})
}

// TeacherNameIn applies the In predicate on the "teacher_name" field.
func TeacherNameIn(vs ...string) predicate.Teacher {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTeacherName), v...))
	})
}

// TeacherNameNotIn applies the NotIn predicate on the "teacher_name" field.
func TeacherNameNotIn(vs ...string) predicate.Teacher {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTeacherName), v...))
	})
}

// TeacherNameGT applies the GT predicate on the "teacher_name" field.
func TeacherNameGT(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTeacherName), v))
	})
}

// TeacherNameGTE applies the GTE predicate on the "teacher_name" field.
func TeacherNameGTE(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTeacherName), v))
	})
}

// TeacherNameLT applies the LT predicate on the "teacher_name" field.
func TeacherNameLT(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTeacherName), v))
	})
}

// TeacherNameLTE applies the LTE predicate on the "teacher_name" field.
func TeacherNameLTE(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTeacherName), v))
	})
}

// TeacherNameContains applies the Contains predicate on the "teacher_name" field.
func TeacherNameContains(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTeacherName), v))
	})
}

// TeacherNameHasPrefix applies the HasPrefix predicate on the "teacher_name" field.
func TeacherNameHasPrefix(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTeacherName), v))
	})
}

// TeacherNameHasSuffix applies the HasSuffix predicate on the "teacher_name" field.
func TeacherNameHasSuffix(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTeacherName), v))
	})
}

// TeacherNameEqualFold applies the EqualFold predicate on the "teacher_name" field.
func TeacherNameEqualFold(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTeacherName), v))
	})
}

// TeacherNameContainsFold applies the ContainsFold predicate on the "teacher_name" field.
func TeacherNameContainsFold(v string) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTeacherName), v))
	})
}

// HasStudents applies the HasEdge predicate on the "students" edge.
func HasStudents() predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StudentsTable, StudentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentsWith applies the HasEdge predicate on the "students" edge with a given conditions (other predicates).
func HasStudentsWith(preds ...predicate.Student) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StudentsTable, StudentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Teacher) predicate.Teacher {
	return predicate.Teacher(func(s *sql.Selector) {
		p(s.Not())
	})
}
